{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","amountBoxes","sumBoxes","required","invalid","possibilities","getPossibilities","size","array","allPossibilities","correctPossibilities","p","t","i","length","concat","push","forEach","res","reduce","a","b","req","filter","el","includes","map","pos","index","possibility","key","style","label","join","handleChangeSlider","value","id","setState","handleChangeArray","number","currentArray","indexOf","splice","getCheckboxes","checkboxes","FormControlLabel","control","Checkbox","color","onChange","e","target","checked","labelPlacement","Container","fixed","maxWidth","Typography","gutterBottom","Slider","defaultValue","step","min","max","marks","valueLabelDisplay","aria-labelledby","onChangeCommitted","FormControl","component","FormGroup","aria-label","row","this","flexGrow","paddingTop","Grid","container","spacing","data","item","xs","Paper","padding","textAlign","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4ecaf1f7.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Container, Grid} from \"@material-ui/core\";\nimport {Slider} from \"@material-ui/core\";\nimport {Paper, Typography} from \"@material-ui/core\";\nimport {Checkbox, FormGroup, FormControlLabel, FormControl} from \"@material-ui/core\";\n\nexport default class App extends Component {\n    state = {amountBoxes: 3, sumBoxes: 19, required: [], invalid: [], possibilities: []};\n    constructor() {\n        super();\n        this.state.possibilities = this.getPossibilities();\n    }\n    getPossibilities = () => {\n        const size = this.state.amountBoxes;\n        const array = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n        function p(t, i) {\n            if (t.length === size) {\n                allPossibilities.push(t);\n                return;\n            }\n            if (i + 1 > array.length) {\n                return;\n            }\n            p(t.concat(array[i]), i + 1);\n            p(t, i + 1);\n        }\n\n        const allPossibilities = [];\n        let correctPossibilities = [];\n        p([], 0);\n\n        allPossibilities.forEach((res) => {\n            if (res.reduce((a, b) => a + b, 0) === this.state.sumBoxes) {\n                correctPossibilities.push(res)\n            }\n        });\n\n        this.state.required.forEach((req) => {\n            correctPossibilities = correctPossibilities.filter((el) => el.includes(req));\n        });\n\n        this.state.invalid.forEach((req) => {\n            correctPossibilities = correctPossibilities.filter((el) => !el.includes(req));\n        });\n        correctPossibilities = correctPossibilities.map((pos, index) => {\n            return {possibility: pos, key: index, style: 'primary', label: pos.join(' ')}\n        });\n        return correctPossibilities;\n    };\n    handleChangeSlider = (value, id) => {\n        this.setState({[id]: value});\n        this.setState({possibilities: this.getPossibilities()});\n    };\n    handleChangeArray = (value, number, id) => {\n        const currentArray = this.state[id];\n        if (value) {\n            currentArray.push(number);\n        } else {\n            const index = currentArray.indexOf(number);\n            if (index !== -1) currentArray.splice(index, 1);\n        }\n        this.setState({[id]: currentArray});\n        this.setState({possibilities: this.getPossibilities()});\n    };\n    getCheckboxes = (id) => {\n        const checkboxes = [];\n        for (let i = 1; i < 10; i++) {\n            checkboxes.push(<FormControlLabel\n                value=\"top\"\n                control={<Checkbox color=\"primary\"\n                                   onChange={(e, value) => this.handleChangeArray(e.target.checked, i, id)}/>}\n                label={i}\n                key={i}\n                labelPlacement=\"bottom\"\n            />)\n        }\n        return checkboxes;\n    };\n    render() {\n        return (\n            <Container fixed={false} maxWidth={'md'}>\n                <h1>\n                    Sudoku Killer Helper\n                </h1>\n                <Typography gutterBottom>\n                    Amount of squares:\n                </Typography>\n                <Slider\n                    defaultValue={3}\n                    step={1}\n                    min={1}\n                    max={5}\n                    marks\n                    valueLabelDisplay={'on'}\n                    aria-labelledby={\"discrete-slider-always\"}\n                    onChangeCommitted={(e, value) => this.handleChangeSlider(value, 'amountBoxes')}\n                />\n                <Typography gutterBottom>\n                    Sum of boxes:\n                </Typography>\n                <Slider\n                    defaultValue={19}\n                    step={1}\n                    min={3}\n                    max={35}\n                    marks\n                    valueLabelDisplay={'on'}\n                    aria-labelledby={\"discrete-slider-always\"}\n                    onChangeCommitted={(e, value) => this.handleChangeSlider(value, 'sumBoxes')}\n                />\n                <FormControl component=\"fieldset\">\n                    <Typography gutterBottom>\n                        Required Values:\n                    </Typography>\n                    <FormGroup aria-label=\"position\" row>\n                        {this.getCheckboxes('required')}\n                    </FormGroup>\n                </FormControl>\n                <FormControl component=\"fieldset\">\n                    <Typography gutterBottom>\n                        Invalid Values:\n                    </Typography>\n                    <FormGroup aria-label=\"position\" row>\n                        {this.getCheckboxes('invalid')}\n                    </FormGroup>\n                </FormControl>\n                <div style={{flexGrow: 1, paddingTop: 20}}>\n                    <Grid container spacing={3}>\n                        {this.state.possibilities.map(data => {\n                            return (\n                                <Grid item xs={4}>\n                                    <Paper style={{padding: 15, textAlign: 'center'}} key={data.key}>{data.label}</Paper>\n                                </Grid>\n                            );\n                        })}\n                    </Grid>\n                </div>\n            </Container>\n        );\n    }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}